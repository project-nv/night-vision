// Navy ~ 0.1-lite

// <ds>Ranging indicator, e.g. RSI</ds>
// Format: [<timestamp>, <value>]

[OVERLAY name=Range, ctx=Canvas, verion=1.0.1]

// Overlay props
prop('color', { type: 'Color', def: '#ec206e' })
prop('backColor', { type: 'Color', def: '#381e9c16' })
prop('bandColor', { type: 'Color', def: '#535559' })
prop('lineWidth', { type: 'number', def: 1 })
prop('lineWidthBand', { type: 'number', def: 1 })
prop('upperBand', { type: 'number', def: 70 })
prop('lowerBand', { type: 'number', def: 30 })

// Draw call
draw(ctx) {
    const layout = $core.layout
    const upper = layout.value2y($props.upperBand)
    const lower = layout.value2y($props.lowerBand)
    const data = $core.data
    const view = $core.view
    // RSI values
    ctx.lineWidth = $props.lineWidth
    ctx.lineJoin = "round"
    ctx.strokeStyle = $props.color
    ctx.beginPath()
    for (var i = view.i1, n = view.i2; i <= n; i++) {
        let p = data[i]
        let x = layout.ti2x(p[0], i)
        let y = layout.value2y(p[1])
        ctx.lineTo(x, y)
    }
    ctx.stroke()
    ctx.lineWidth = $props.lineWidthBand
    ctx.strokeStyle = $props.bandColor
    ctx.setLineDash([5]) // Will be removed after draw()
    ctx.beginPath()
    // Fill the area between the bands
    ctx.fillStyle = $props.backColor
    ctx.fillRect(0, upper, layout.width, lower - upper)
    // Upper band
    ctx.moveTo(0, upper)
    ctx.lineTo(layout.width, upper)
    // Lower band
    ctx.moveTo(0, lower)
    ctx.lineTo(layout.width, lower)
    ctx.stroke()
}

yRange(hi, lo) => [
    Math.max(hi, $props.upperBand),
    Math.min(lo, $props.lowerBand)
]

// Legend, defined as pairs [value, color]
legend(x) => [[x[1], $props.color]]
